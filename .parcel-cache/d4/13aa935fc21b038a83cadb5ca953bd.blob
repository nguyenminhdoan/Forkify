"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

var _parentEl = new WeakMap();

var _data = new WeakMap();

var _generateMarkup = new WeakSet();

class RecipeView {
  constructor() {
    _generateMarkup.add(this);

    _parentEl.set(this, {
      writable: true,
      value: document.querySelector('.recipe')
    });

    _data.set(this, {
      writable: true,
      value: void 0
    });
  }

  render(data) {
    _classPrivateFieldSet(this, _data, data);

    this.clear;

    const markup = _classPrivateMethodGet(this, _generateMarkup, _generateMarkup2).call(this);

    _classPrivateFieldGet(this, _parentEl).insertAdjacentHTML('afterbegin', markup);
  }

  renderSpinner() {
    const markup = `
      <div class="spinner">
        <svg>
          <use href="${_icons.default}#icon-loader"></use>
        </svg>
      </div>
    `;
    _classPrivateFieldGet(this, _parentEl).innerHTML = '';

    _classPrivateFieldGet(this, _parentEl).insertAdjacentHTML('afterbegin', markup);
  }

  clear() {
    _classPrivateFieldGet(this, _parentEl).innerHTML = '';
  }

}

var _generateMarkup2 = function _generateMarkup2() {
  return `
    <figure class="recipe__fig">
      <img src="${this._data.image}" alt="${this._data.title}" class="recipe__img" />
      <h1 class="recipe__title">
        <span>${this._data.title}</span>
      </h1>
    </figure>

    <div class="recipe__details">
      <div class="recipe__info">
        <svg class="recipe__info-icon">
          <use href="${_icons.default}#icon-clock"></use>
        </svg>
        <span class="recipe__info-data recipe__info-data--minutes">${this._data.cookingTime}</span>
        <span class="recipe__info-text">minutes</span>
      </div>
      <div class="recipe__info">
        <svg class="recipe__info-icon">
          <use href="${_icons.default}#icon-users"></use>
        </svg>
        <span class="recipe__info-data recipe__info-data--people">${this._data.servings}</span>
        <span class="recipe__info-text">servings</span>

        <div class="recipe__info-buttons">
          <button class="btn--tiny btn--update-servings" data-update-to="${this._data.servings - 1}">
            <svg>
              <use href="${_icons.default}#icon-minus-circle"></use>
            </svg>
          </button>
          <button class="btn--tiny btn--update-servings" data-update-to="${this._data.servings + 1}">
            <svg>
              <use href="${_icons.default}#icon-plus-circle"></use>
            </svg>
          </button>
        </div>
      </div>

      <div class="recipe__user-generated ${this._data.key ? '' : 'hidden'}">
        <svg>
          <use href="${_icons.default}#icon-user"></use>
        </svg>
      </div>
      <button class="btn--round btn--bookmark">
        <svg class="">
          <use href="${_icons.default}#icon-bookmark${this._data.bookmarked ? '-fill' : ''}"></use>
        </svg>
      </button>
    </div>

    <div class="recipe__ingredients">
      <h2 class="heading--2">Recipe ingredients</h2>
      <ul class="recipe__ingredient-list">
        ${this._data.ingredients.map(this._generateMarkupIngredient).join('')}
    </div>

    <div class="recipe__directions">
      <h2 class="heading--2">How to cook it</h2>
      <p class="recipe__directions-text">
        This recipe was carefully designed and tested by
        <span class="recipe__publisher">${this._data.publisher}</span>. Please check out
        directions at their website.
      </p>
      <a
        class="btn--small recipe__btn"
        href="${this._data.sourceUrl}"
        target="_blank"
      >
        <span>Directions</span>
        <svg class="search__icon">
          <use href="${_icons.default}#icon-arrow-right"></use>
        </svg>
      </a>
    </div>
  `; //   return `
  //       <figure class="this.#data__fig">
  //       <img src="${this.#data.image}" alt="Tomato" class="this.#data__img" />
  //       <h1 class="this.#data__title">
  //         <span>${this.#data.title}</span>
  //       </h1>
  //     </figure>
  //     <div class="this.#data__details">
  //       <div class="this.#data__info">
  //         <svg class="this.#data__info-icon">
  //           <use href="${icons}#icon-clock"></use>
  //         </svg>
  //         <span class="this.#data__info-data this.#data__info-data--minutes">${
  //           this.#data.cookingTime
  //         }</span>
  //         <span class="this.#data__info-text">minutes</span>
  //       </div>
  //       <div class="this.#data__info">
  //         <svg class="this.#data__info-icon">
  //           <use href="${icons}#icon-users"></use>
  //         </svg>
  //         <span class="this.#data__info-data this.#data__info-data--people">${
  //           this.#data.servings
  //         }</span>
  //         <span class="this.#data__info-text">servings</span>
  //         <div class="this.#data__info-buttons">
  //           <button class="btn--tiny btn--increase-servings">
  //             <svg>
  //               <use href="${icons}#icon-minus-circle"></use>
  //             </svg>
  //           </button>
  //           <button class="btn--tiny btn--increase-servings">
  //             <svg>
  //               <use href="${icons}#icon-plus-circle"></use>
  //             </svg>
  //           </button>
  //         </div>
  //       </div>
  //       <div class="this.#data__user-generated">
  //         <svg>
  //           <use href="${icons}#icon-user"></use>
  //         </svg>
  //       </div>
  //       <button class="btn--round">
  //         <svg class="">
  //           <use href="${icons}#icon-bookmark-fill"></use>
  //         </svg>
  //       </button>
  //     </div>
  //     <div class="this.#data__ingredients">
  //       <h2 class="heading--2">this.#data Ingredients</h2>
  //       <ul class="this.#data__ingredient-list">
  //         ${this.#data.ingredient
  //           .map(ing => {
  //             return `
  //             <li class="this.#data__ingredient">
  //             <svg class="this.#data__icon">
  //               <use href="${icons}#icon-check"></use>
  //             </svg>
  //             <div class="this.#data__quantity">${ing.quantity}</div>
  //             <div class="this.#data__description">
  //               <span class="this.#data__unit">${ing.unit}</span>
  //               ${ing.description}
  //             </div>
  //           </li>
  //             `;
  //           })
  //           .join('')}
  //         <li class="this.#data__ingredient">
  //           <svg class="this.#data__icon">
  //             <use href="${icons}#icon-check"></use>
  //           </svg>
  //           <div class="this.#data__quantity">0.5</div>
  //           <div class="this.#data__description">
  //             <span class="this.#data__unit">cup</span>
  //             ricotta cheese
  //           </div>
  //         </li>
  //       </ul>
  //     </div>
  //     <div class="this.#data__directions">
  //       <h2 class="heading--2">How to cook it</h2>
  //       <p class="this.#data__directions-text">
  //         This this.#data was carefully designed and tested by
  //         <span class="this.#data__publisher">${
  //           this.#data.publisher
  //         }</span>. Please check out
  //         directions at their website.
  //       </p>
  //       <a
  //         class="btn--small this.#data__btn"
  //         href="${this.#data.sourceURL}"
  //         target="_blank"
  //       >
  //         <span>Directions</span>
  //         <svg class="search__icon">
  //           <use href="${icons}#icon-arrow-right"></use>
  //         </svg>
  //       </a>
  //     </div>
  //   `;
  // }
};

var _default = new RecipeView();

exports.default = _default;