"use strict";

require("core-js/modules/es.typed-array.float32-array.js");

require("core-js/modules/es.typed-array.float64-array.js");

require("core-js/modules/es.typed-array.int8-array.js");

require("core-js/modules/es.typed-array.int16-array.js");

require("core-js/modules/es.typed-array.int32-array.js");

require("core-js/modules/es.typed-array.uint8-array.js");

require("core-js/modules/es.typed-array.uint8-clamped-array.js");

require("core-js/modules/es.typed-array.uint16-array.js");

require("core-js/modules/es.typed-array.uint32-array.js");

require("core-js/modules/es.typed-array.from.js");

require("core-js/modules/es.typed-array.of.js");

require("core-js/modules/esnext.array.last-index.js");

require("core-js/modules/esnext.array.last-item.js");

require("core-js/modules/esnext.composite-key.js");

require("core-js/modules/esnext.composite-symbol.js");

require("core-js/modules/esnext.map.delete-all.js");

require("core-js/modules/esnext.map.every.js");

require("core-js/modules/esnext.map.filter.js");

require("core-js/modules/esnext.map.find.js");

require("core-js/modules/esnext.map.find-key.js");

require("core-js/modules/esnext.map.from.js");

require("core-js/modules/esnext.map.group-by.js");

require("core-js/modules/esnext.map.includes.js");

require("core-js/modules/esnext.map.key-by.js");

require("core-js/modules/esnext.map.key-of.js");

require("core-js/modules/esnext.map.map-keys.js");

require("core-js/modules/esnext.map.map-values.js");

require("core-js/modules/esnext.map.merge.js");

require("core-js/modules/esnext.map.of.js");

require("core-js/modules/esnext.map.reduce.js");

require("core-js/modules/esnext.map.some.js");

require("core-js/modules/esnext.map.update.js");

require("core-js/modules/esnext.math.clamp.js");

require("core-js/modules/esnext.math.deg-per-rad.js");

require("core-js/modules/esnext.math.degrees.js");

require("core-js/modules/esnext.math.fscale.js");

require("core-js/modules/esnext.math.iaddh.js");

require("core-js/modules/esnext.math.imulh.js");

require("core-js/modules/esnext.math.isubh.js");

require("core-js/modules/esnext.math.rad-per-deg.js");

require("core-js/modules/esnext.math.radians.js");

require("core-js/modules/esnext.math.scale.js");

require("core-js/modules/esnext.math.seeded-prng.js");

require("core-js/modules/esnext.math.signbit.js");

require("core-js/modules/esnext.math.umulh.js");

require("core-js/modules/esnext.number.from-string.js");

require("core-js/modules/esnext.observable.js");

require("core-js/modules/esnext.promise.try.js");

require("core-js/modules/esnext.reflect.define-metadata.js");

require("core-js/modules/esnext.reflect.delete-metadata.js");

require("core-js/modules/esnext.reflect.get-metadata.js");

require("core-js/modules/esnext.reflect.get-metadata-keys.js");

require("core-js/modules/esnext.reflect.get-own-metadata.js");

require("core-js/modules/esnext.reflect.get-own-metadata-keys.js");

require("core-js/modules/esnext.reflect.has-metadata.js");

require("core-js/modules/esnext.reflect.has-own-metadata.js");

require("core-js/modules/esnext.reflect.metadata.js");

require("core-js/modules/esnext.set.add-all.js");

require("core-js/modules/esnext.set.delete-all.js");

require("core-js/modules/esnext.set.difference.js");

require("core-js/modules/esnext.set.every.js");

require("core-js/modules/esnext.set.filter.js");

require("core-js/modules/esnext.set.find.js");

require("core-js/modules/esnext.set.from.js");

require("core-js/modules/esnext.set.intersection.js");

require("core-js/modules/esnext.set.is-disjoint-from.js");

require("core-js/modules/esnext.set.is-subset-of.js");

require("core-js/modules/esnext.set.is-superset-of.js");

require("core-js/modules/esnext.set.join.js");

require("core-js/modules/esnext.set.map.js");

require("core-js/modules/esnext.set.of.js");

require("core-js/modules/esnext.set.reduce.js");

require("core-js/modules/esnext.set.some.js");

require("core-js/modules/esnext.set.symmetric-difference.js");

require("core-js/modules/esnext.set.union.js");

require("core-js/modules/esnext.string.at.js");

require("core-js/modules/esnext.string.code-points.js");

require("core-js/modules/esnext.symbol.dispose.js");

require("core-js/modules/esnext.symbol.observable.js");

require("core-js/modules/esnext.symbol.pattern-match.js");

require("core-js/modules/esnext.weak-map.delete-all.js");

require("core-js/modules/esnext.weak-map.from.js");

require("core-js/modules/esnext.weak-map.of.js");

require("core-js/modules/esnext.weak-set.add-all.js");

require("core-js/modules/esnext.weak-set.delete-all.js");

require("core-js/modules/esnext.weak-set.from.js");

require("core-js/modules/esnext.weak-set.of.js");

require("core-js/modules/web.immediate.js");

require("core-js/modules/web.url.js");

require("core-js/modules/web.url.to-json.js");

require("core-js/modules/web.url-search-params.js");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

var _resultView = _interopRequireDefault(require("./views/resultView.js"));

var _paginationView = _interopRequireDefault(require("./views/paginationView"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

var _bookmarkView = _interopRequireDefault(require("./views/bookmarkView.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// console.log(icons);
// if (module.hot) {
//   module.hot.accept();
// }
// https://forkify-api.herokuapp.com/v2
///////////////////////////////////////
const controlRecipe = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;

    _recipeView.default.renderSpinner(); // update result view to mark selected search result


    _resultView.default.update(model.getSearchResultPage());

    _bookmarkView.default.update(model.state.bookmark); //1 Loading Recipe


    await model.loadRecipe(id); //2) RENDER RECIPE

    _recipeView.default.render(model.state.recipe);
  } catch (err) {
    // alert(err);
    _recipeView.default.renderError();
  }
};

const controlSearchResult = async function () {
  try {
    _resultView.default.renderSpinner(); //1) GET SEARCH QUERY


    const query = _searchView.default.getQuery();

    if (!query) return; // 2) LOAD SEARCH QUERY

    await model.loadSearchResult(query); // 3) RENDER RESULTS
    // console.log(model.state.search.result);

    _resultView.default.render(model.getSearchResultPage()); // 4) Render initial pagination buttons


    _paginationView.default.render(model.state.search);
  } catch (err) {
    console.log(err);
  }
};

const controlPagination = function (goToPage) {
  // 3) RENDER RESULTS
  // console.log(model.state.search.result);
  _resultView.default.render(model.getSearchResultPage(goToPage)); // 4) Render initial pagination buttons


  _paginationView.default.render(model.state.search);
};

const controlServings = function (newServing) {
  // Update the recipe serving (in state)
  model.updateServing(newServing); // Update the recipeView
  // recipeView.render(model.state.recipe);

  _recipeView.default.update(model.state.recipe);
};

const controlAddBookmark = function () {
  // 1) add/remove bookmark
  if (!model.state.recipe.bookmarked) model.addBookmark(model.state.recipe);else model.deleteBookmark(model.state.recipe.id); // console.log(model.state.recipe);
  // 2) update recipe view

  _recipeView.default.update(model.state.recipe); //3 render bookmark


  _bookmarkView.default.render(model.state.bookmark);
};

const init = function () {
  _recipeView.default.handlerRender(controlRecipe);

  _recipeView.default.handleServing(controlServings);

  _recipeView.default.handleAddBookmark(controlAddBookmark);

  _searchView.default.handlerSearchView(controlSearchResult);

  _paginationView.default._handleClickPagination(controlPagination);
};

init(); // controlRecipe();
// window.addEventListener('hashchange', showRecipe)
// console.log(recipeContainer);