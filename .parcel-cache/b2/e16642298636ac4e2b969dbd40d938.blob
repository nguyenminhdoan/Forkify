"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteBookmark = exports.addBookmark = exports.updateServing = exports.getSearchResultPage = exports.loadSearchResult = exports.loadRecipe = exports.state = void 0;

var _regeneratorRuntime = require("regenerator-runtime");

var _config = require("./config.js");

var _helpers = require("./helpers.js");

const state = {
  recipe: {},
  search: {
    query: '',
    result: [],
    page: 1,
    resultPerPage: _config.RES_PER_PAGE
  },
  bookmark: []
};
exports.state = state;

const loadRecipe = async function (id) {
  try {
    const data = await (0, _helpers.GET_JSON)(`${_config.API_URL}${id}`); // console.log(res);

    const {
      recipe
    } = data.data;
    state.recipe = {
      id: recipe.id,
      title: recipe.title,
      publisher: recipe.publisher,
      sourceURL: recipe.source_url,
      image: recipe.image_url,
      servings: recipe.servings,
      cookingTime: recipe.cooking_time,
      ingredient: recipe.ingredients
    }; // console.log(recipe);

    if (state.bookmark.some(bookmark => bookmark.id === id)) state.recipe.bookmarked = true;else state.recipe.bookmarked = false;
  } catch (err) {
    console.error(`${err}ðŸŒ‹ðŸŒ‹ðŸŒ‹ðŸŒ‹`);
    throw err;
  } // console.log(state.recipe);

};

exports.loadRecipe = loadRecipe;

const loadSearchResult = async function (query) {
  try {
    state.query = query;
    const data = await (0, _helpers.GET_JSON)(`${_config.API_URL}?search=${query}`);
    state.search.result = data.data.recipes.map(ing => {
      return {
        id: ing.id,
        title: ing.title,
        publisher: ing.publisher,
        image: ing.image_url
      };
    });
    state.search.page = 1; // console.log(state.search.result);
  } catch (err) {
    console.error(`${err}ðŸŒ‹ðŸŒ‹ðŸŒ‹ðŸŒ‹`);
    throw err;
  }
};

exports.loadSearchResult = loadSearchResult;

const getSearchResultPage = function (page = state.search.page) {
  state.search.page = page;
  const start = (page - 1) * state.search.resultPerPage; //0;

  const end = page * state.search.resultPerPage; //9;

  return state.search.result.slice(start, end);
};

exports.getSearchResultPage = getSearchResultPage;

const updateServing = function (newServing) {
  state.recipe.ingredient.forEach(ing => {
    // NewQT = oldQT * newServing / oldServing  ///// 2* 8 / 4 = 4
    ing.quantity = ing.quantity * newServing / state.recipe.servings;
  });
  state.recipe.servings = newServing;
};

exports.updateServing = updateServing;

const addBookmark = function (recipe) {
  // add bookmark
  state.bookmark.push(recipe); // mark current recipe as bookmarked

  if (recipe.id === state.recipe.id) state.recipe.bookmarked = true;
};

exports.addBookmark = addBookmark;

const deleteBookmark = function (id) {
  state.bookmark.findIndex(el => el.id === id);
  state.bookmark.splice(index, 1);
};

exports.deleteBookmark = deleteBookmark;