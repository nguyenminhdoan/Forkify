"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _view = _interopRequireDefault(require("./view.js"));

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PaginationView extends _view.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentEl", document.querySelector('.pagination'));
  }

  _handleClickPagination(handle) {
    this._parentEl.addEventListener('click', function (e) {
      const btn = e.target.closest('.btn--inline');
      if (!btn) return;
      handle();
      const goToPage = btn.dataset.goto;
      console.log(goToPage);
    });
  }

  _generateMarkup() {
    const curPage = this._data.page;
    const numPages = Math.ceil(this._data.result.length / this._data.resultPerPage);
    console.log(numPages); // page 1 and there are other other pages

    if (curPage === 1 && numPages > 1) {
      return `
            <button  data-goto = ${curPage + 1} class="btn--inline pagination__btn--next">
                <span>Page ${curPage + 1}</span>
                <svg class="search__icon">
                    <use href="${_icons.default}#icon-arrow-right"></use>
                </svg>
            </button>
            `;
    } // Last page


    if (curPage === numPages && numPages > 1) {
      return `
      <button data-goto = ${curPage - 1} class="btn--inline pagination__btn--prev">
      <svg class="search__icon">
        <use href="${_icons.default}#icon-arrow-left"></use>
      </svg>
      <span>Page ${curPage - 1}</span>
      </button>
      `;
    } // other pages


    if (curPage < numPages) {
      return `
      <button  data-goto = ${curPage - 1} class="btn--inline pagination__btn--prev">
            <svg class="search__icon">
                <use href="${_icons.default}#icon-arrow-left"></use>
            </svg>
            <span>Page ${curPage - 1}</span>
      </button>
      
      <button  data-goto = ${curPage + 1} class="btn--inline pagination__btn--next">
          <span>Page ${curPage + 1}</span>
          <svg class="search__icon">
              <use href="${_icons.default}#icon-arrow-right"></use>
          </svg>
      </button>
      `;
    } // page 1 and there NO other pages


    return '';
  }

}

var _default = new PaginationView();

exports.default = _default;